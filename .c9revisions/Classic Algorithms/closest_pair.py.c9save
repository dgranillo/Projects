{"ts":1378085132975,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env python2.7\n\n\"\"\"Closest Pair Problem\nThe closest pair of points problem or closest pair problem is a problem of\ncomputational geometry. Given 'n' points in metric space, find a pair of points\nwith the smallest distance between them\n\nAuthor: Dan Granillo\"\"\"\n\nimport random\nimport math\n\nmy_points = []\nd_points = {}\nd_distances = {}\nsorted_d = []\n\ndef gen_points():\n    for i in range(100): # Creating points to play with\n        x = random.randrange(-100,100)\n        y = random.randrange(-100,100)\n        z = random.randrange(-100,100)\n        my_points.append((x, y, z))\n    for i in range(len(my_points)): # Dictionary of points to give each a name\n        d_points[i] = my_points[i]\n\ndef get_distance(point_a, point_b):\n    x1 = point_a[0]\n    y1 = point_a[1]\n    z1 = point_a[2]\n    x2 = point_b[0]\n    y2 = point_b[1]\n    z2 = point_b[2]\n\n    d = math.sqrt((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)\n    return d\n\ndef get_distances(dictionary):\n    d_length = len(dictionary.values())\n    for i in range(d_length-1):\n        for j in range (i+1,d_length):\n            d_distances[dictionary[i], dictionary[j]] = get_distance(dictionary[i],dictionary[j])\n\ndef sort_distances(distances):\n    for key, value in sorted(distances.iteritems(), key = lambda (k,v):(v,k)):\n        sorted_d.append(\"%s, %.03f\" %(key, value))\n    return sorted_d[0]\n\nif __name__ == '__main__':\n    gen_points()\n    get_distances(d_points)\n    print sort_distances(d_distances)\n"]],"start1":0,"start2":0,"length1":0,"length2":1460}]],"length":1460}
