{"ts":1378746469817,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Classic Algorithms\r\n-----------------\r\n\r\n**[Collatz Conjecture](collatz.py)** - Start with a number *n > 1*. Find the number of steps it takes to reach one using the following process: If *n* is even, divide it by 2. If *n* is odd, multiply it by 3 and add 1.\r\n\r\n**Sorting** - Implement two types of sorting algorithms: Merge sort and bubble sort.\r\n\r\n**[Closest pair problem](closest_pair.py)** - The closest pair of points problem or closest pair problem is a problem of computational geometry: given *n* points in metric space, find a pair of points with the smallest distance between them.\r\n\r\n**Sieve of Eratosthenes** - The sieve of Eratosthenes is one of the most efficient ways to find all of the smaller primes (below 10 million or so).\r\n"]],"start1":0,"start2":0,"length1":0,"length2":745}]],"length":745}
{"contributors":[],"silentsave":false,"ts":1378757334132,"patch":[[{"diffs":[[0,"m.\r\n\r\n**"],[1,"["],[0,"Sieve of"]],"start1":590,"start2":590,"length1":16,"length2":17},{"diffs":[[0,"osthenes"],[1,"](sieve_of_eratosthenes.py)"],[0,"** - The"]],"start1":612,"start2":612,"length1":16,"length2":43}]],"length":773,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378774637965,"patch":[[{"diffs":[[0,"\r\n**"],[1,"["],[0,"Sorting"],[1,"](sorting.py)"],[0,"** -"]],"start1":261,"start2":261,"length1":15,"length2":29}]],"length":787,"saved":false}
